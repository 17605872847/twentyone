const ws={
  url:String,
  socket:Object,
  isReconnect:Boolean,
  reTimer:Number,
  reTimerNumber:3000,
  connect(url) {
    const self=ws
    self.url=url;
    self.socket=new WebSocket(url);
    self.socket.onopen=self.open;
    window.onbeforeunload=function (e) {
      self.isReconnect=true;
      self.socket.close()
    }
  },
  close(evt){
    const self=ws;
    if(!evt){
      self.socket.close()
      self.isReconnect=true;
    }
    return evt
  },//ws关闭时
  open(){
    console.log("连接成功");
    const self=ws;
    self.socket.onmessage =self.message;
    self.socket.onclose=self.close;
    self.socket.onerror=self.error;
    self.socket.onopen=self.reOpen;
    self.isReconnect=false;
    self.reConnect()
  },//ws连接时
  reError(evt){
    const self=ws;
    console.log("重连失败");
    console.log(evt);
    self.isReconnect=false;
  },//ws重连失败
  reOpen(){
    const self=ws;
    self.reConnect()
    console.log("重连成功");
    self.isReconnect=false;
  },//ws重连
  error(evt){
    const self=ws;
    return evt
  },//暂无错误处理
  message(evt){
    const self=ws;
    console.log(evt)
    if(evt){
      try {
        console.log(JSON.parse(evt.data),"yes")
        return JSON.parse(evt.data)
      }catch (e) {
        console.log(evt.data,"NO")
        return evt.data
      }
    }
  },
  reConnect(){
    const self=ws;
    clearTimeout(self.reTimer);
    self.reTimer=setTimeout(()=>{
      self.reConnect();
      if(self.socket.readyState===1 && self.socket && !self.isReconnect){
        self.socket.send(JSON.stringify({type:'ping'}));
      }
      if(self.socket.readyState===3 && !self.isReconnect){
        self.socket.close();
        self.socket =new WebSocket(self.url);
        console.log("断线重连中...");
        self.socket.onmessage =self.message;
        self.socket.onclose=self.close;
        self.socket.onerror=self.reError;
        self.socket.onopen=self.reOpen;
        self.isReconnect=true;
      }
    },self.reTimerNumber);
  },//重构形式—心跳
  ////////////////////
}
export default ws
